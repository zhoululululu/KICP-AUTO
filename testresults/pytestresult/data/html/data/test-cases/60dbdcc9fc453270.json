{
  "uid" : "60dbdcc9fc453270",
  "name" : "正常查询-未知问题回复非空查询",
  "fullName" : "test_robot_config.TestRobotConfig#test_robot_un_problem_query",
  "historyId" : "25943a08abbce1a0ada03a1312bd90ca",
  "time" : {
    "start" : 1599642123011,
    "stop" : 1599642123094,
    "duration" : 83
  },
  "description" : "\n        机器人未知问题回复查询\n        ",
  "descriptionHtml" : "<pre><code>    机器人未知问题回复查询\n</code></pre>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: assert False\n +  where False = <function Assert.get_result at 0x00000166541E1D08>(['709', True, 2, 5, [{'indexNo': '1', 'recordId': '1297', 'responseContent': '<div>zl-专用查询机器人配置（非空）-未知问题1</div>', 'rob... {'indexNo': '3', 'recordId': '1303', 'responseContent': '<div>zl-专用查询机器人配置（非空）-未知问题3</div>', 'robotId': '709'}], '11'], ['709', True, 1, 1, [{'indexNo': '3', 'recordId': '5', 'responseContent': 709, 'robotId': '4276'}, {'indexNo': '3', 'r...9'}, {'indexNo': '5', 'recordId': '5', 'responseContent': 709, 'robotId': '4282'}], '<div>zl-专用查询机器人配置（非空）-暖场语1</div>'])\n +    where <function Assert.get_result at 0x00000166541E1D08> = Assert.get_result",
  "statusTrace" : "self = <test_robot_config.TestRobotConfig object at 0x00000166575EA5F8>\ndesc = '正常查询-未知问题回复非空查询', params = '{\"robotId\":\"709\",\"userId\":\"11\"}'\nassert_value = 'sql-select ww.robotId,ww.warmResponseEnable,ww.getContactDontSendEnable,ww.warmResponseEnable,ww.warmSendLimitNums,ww...ot_warm_word_list wwl where ww.robotId =709 and ww.userId = 11 and ww.userId = wwl.userId and wwl.robotId = ww.robotId'\n\n    @pytest.mark.parametrize('desc,params,assert_value', un_problem_query_data)  # 用例参数化\n    @allure.feature(\"机器人配置\")\n    @allure.story('机器人未知问题回复查询')  # 描述\n    @allure.title('{desc}')  # title\n    @pytest.mark.flaky(returns=0)  # 标记失败后重新运行次数\n    @pytest.mark.robot_config\n    def test_robot_un_problem_query(self, desc, params, assert_value):\n        \"\"\"\n        机器人未知问题回复查询\n        \"\"\"\n        actual_result, except_result = RobotUnProblemQuery.un_problem_query(self.url, params, assert_value)\n>       assert Assert.get_result(actual_result, except_result)\nE       AssertionError: assert False\nE        +  where False = <function Assert.get_result at 0x00000166541E1D08>(['709', True, 2, 5, [{'indexNo': '1', 'recordId': '1297', 'responseContent': '<div>zl-专用查询机器人配置（非空）-未知问题1</div>', 'rob... {'indexNo': '3', 'recordId': '1303', 'responseContent': '<div>zl-专用查询机器人配置（非空）-未知问题3</div>', 'robotId': '709'}], '11'], ['709', True, 1, 1, [{'indexNo': '3', 'recordId': '5', 'responseContent': 709, 'robotId': '4276'}, {'indexNo': '3', 'r...9'}, {'indexNo': '5', 'recordId': '5', 'responseContent': 709, 'robotId': '4282'}], '<div>zl-专用查询机器人配置（非空）-暖场语1</div>'])\nE        +    where <function Assert.get_result at 0x00000166541E1D08> = Assert.get_result\n\ntest_robot_config.py:118: AssertionError",
  "flaky" : false,
  "beforeStages" : [ {
    "name" : "_Class__pytest_setup_class",
    "time" : {
      "start" : 1599642120139,
      "stop" : 1599642120139,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "afterStages" : [ {
    "name" : "_Class__pytest_setup_class::0",
    "time" : {
      "start" : 1599642123402,
      "stop" : 1599642123402,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "机器人未知问题回复查询"
  }, {
    "name" : "feature",
    "value" : "机器人配置"
  }, {
    "name" : "tag",
    "value" : "robot_config"
  }, {
    "name" : "suite",
    "value" : "test_robot_config"
  }, {
    "name" : "subSuite",
    "value" : "TestRobotConfig"
  }, {
    "name" : "host",
    "value" : "WIN-OQ20V7UABJF"
  }, {
    "name" : "thread",
    "value" : "10424-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_robot_config"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "assert_value",
    "value" : "'sql-select ww.robotId,ww.warmResponseEnable,ww.getContactDontSendEnable,ww.warmResponseEnable,ww.warmSendLimitNums,wwl.recordId,wwl.robotId,wwl.intervalSeconds,wwl.responseContent,wwl.indexNo,ww.userId from robot_warm_word ww,robot_warm_word_list wwl where ww.robotId =709 and ww.userId = 11 and ww.userId = wwl.userId and wwl.robotId = ww.robotId'"
  }, {
    "name" : "desc",
    "value" : "'正常查询-未知问题回复非空查询'"
  }, {
    "name" : "params",
    "value" : "'{\"robotId\":\"709\",\"userId\":\"11\"}'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "robot_config" ]
  },
  "source" : "60dbdcc9fc453270.json",
  "parameterValues" : [ "'sql-select ww.robotId,ww.warmResponseEnable,ww.getContactDontSendEnable,ww.warmResponseEnable,ww.warmSendLimitNums,wwl.recordId,wwl.robotId,wwl.intervalSeconds,wwl.responseContent,wwl.indexNo,ww.userId from robot_warm_word ww,robot_warm_word_list wwl where ww.robotId =709 and ww.userId = 11 and ww.userId = wwl.userId and wwl.robotId = ww.robotId'", "'正常查询-未知问题回复非空查询'", "'{\"robotId\":\"709\",\"userId\":\"11\"}'" ]
}