{"name": "正常登陆", "status": "failed", "statusDetails": {"message": "AssertionError: assert False\n +  where False = <function Assert.get_result at 0x0000018B4AF03510>(['11', 'zl-test', '2020-09-02 23:10:07', '2020-09-02 23:10:07', True, 'ask', ...], ['11', 'zl-test', '2020-09-02 10:10:07', '2020-09-02 10:10:07', True, 'ask', ...])\n +    where <function Assert.get_result at 0x0000018B4AF03510> = Assert.get_result", "trace": "self = <test_robot_manage.TestRobotManage object at 0x0000018B4B3D46A0>\ndesc = '正常登陆', params = '{\"username\":\"zl-test\",\"password\":\"admin\"}'\nassert_value = 'sql-select DISTINCT rb.userId,rb.userName,rb.addTime,rb.modifyTime,rb.dataStatus,ra.robotType,ry.typeName,ry.addTime,...manage.`user` rb,kicp_basic_data.robot_type ry\\nwhere ra.userId=11 and ra.userId =rb.userId and ra.robotType=ry.typeId'\n\n    @pytest.mark.parametrize('desc,params,assert_value', login_robot_data)  # 用例参数化\n    @allure.feature(\"机器人管理\")\n    @allure.story('登录机器人')  # 描述\n    @allure.title('{desc}')  # title\n    @pytest.mark.flaky(returns=0)  # 标记失败后重新运行次数\n    @pytest.mark.robot_manage\n    def test_robot_login(self, desc, params, assert_value):\n        \"\"\"\n        登录robot\n        \"\"\"\n        (actual_result, except_result) = RobotLogin.login_robot(self.url, params, assert_value)\n>       assert Assert.get_result(actual_result, except_result)\nE       AssertionError: assert False\nE        +  where False = <function Assert.get_result at 0x0000018B4AF03510>(['11', 'zl-test', '2020-09-02 23:10:07', '2020-09-02 23:10:07', True, 'ask', ...], ['11', 'zl-test', '2020-09-02 10:10:07', '2020-09-02 10:10:07', True, 'ask', ...])\nE        +    where <function Assert.get_result at 0x0000018B4AF03510> = Assert.get_result\n\ntest_robot_manage.py:129: AssertionError"}, "description": "\n        登录robot\n        ", "parameters": [{"name": "desc", "value": "'正常登陆'"}, {"name": "params", "value": "'{\"username\":\"zl-test\",\"password\":\"admin\"}'"}, {"name": "assert_value", "value": "'sql-select DISTINCT rb.userId,rb.userName,rb.addTime,rb.modifyTime,rb.dataStatus,ra.robotType,ry.typeName,ry.addTime,ry.modifyTime,ry.dataStatus\nfrom kicp_robot_config.robot_basic_info ra,kicp_user_manage.`user` rb,kicp_basic_data.robot_type ry\nwhere ra.userId=11 and ra.userId =rb.userId and ra.robotType=ry.typeId'"}], "start": 1600424599082, "stop": 1600424599168, "uuid": "a1f99be3-05e9-4caf-815d-fa2a0bf5d43f", "historyId": "41cf241915a82bd8729cd86fef6e2533", "testCaseId": "53ceb351dacca10155133149bfb25f6e", "fullName": "pytest.test_robot_manage.TestRobotManage#test_robot_login", "labels": [{"name": "story", "value": "登录机器人"}, {"name": "feature", "value": "机器人管理"}, {"name": "tag", "value": "robot_manage"}, {"name": "parentSuite", "value": "pytest"}, {"name": "suite", "value": "test_robot_manage"}, {"name": "subSuite", "value": "TestRobotManage"}, {"name": "host", "value": "WIN-OQ20V7UABJF"}, {"name": "thread", "value": "17960-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "pytest.test_robot_manage"}]}